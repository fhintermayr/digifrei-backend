openapi: 3.0.3
info:
  title: ICP Match
  description: Web application for making new contacts and sharing knowledge between colleagues
  contact:
    name: 'Stiftung ICP MÃ¼nchen'
    url: https://www.icpmuenchen.de/
  version: 0.1.0
servers:
  - url: 'http://localhost:{port}/api/{apiVersion}'
    description: Development server
    variables:
      port:
        enum:
          - '8080'
        default: "8080"
      apiVersion:
        enum:
          - 'v1'
        default: "v1"
  - url: 'https://example.org'
    description: Production server
tags:
  - name: Authentication
    description: Operations about managing the application authentication
  - name: User
    description: Operations about managing the application users
  - name: ExemptionRequest
    description: Operations about managing exemption requests



paths:

  /auth/login:
    post:
      operationId: login
      summary: Authenticate user and return JWT token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        200:
          description: JWT token successfully generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JwtResponse'
        401:
          description: Invalid credentials

  /auth/user:
    get:
      operationId: getCurrentUser
      summary: Get the current authenticated user
      tags:
        - Authentication
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized access

  /user/register:
    post:
      operationId: createUser
      summary: Creates and registers a new user in the application
      tags:
        - User
      requestBody:
        required: true
        description: Object containing all information about the user who should be registered
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreation'
      responses:
        201:
          description: The newly created user based on the information provided in the request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /user:
    get:
      operationId: getAllUsersContainingSearchTerm
      summary: Returns all users or users whose name or email contains a search term
      parameters:
        - $ref: '#/components/parameters/searchTerm'
        - $ref: '#/components/parameters/limit'
      tags:
        - User
      responses:
        200:
          description: | 
            A list containing all users whose name or username contains the specified search term.
            If the search term is omitted, a list of all users will be returned.
            If no user matches the search term, an empty list will be returned.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'

  /user/{username}:
    head:
      operationId: checkIfUsernameIsTaken
      summary: Checks if email is already taken
      parameters:
        - $ref: '#/components/parameters/username'
      tags:
        - User
      responses:
        200:
          description: Username is taken
        409:
          description: Username is available

  /user/{userId}:
    parameters:
      - $ref: '#/components/parameters/userId'
    get:
      operationId: getUserById
      summary: Returns a user by his user id
      tags:
        - User
      responses:
        200:
          description: All information about the user whose id was specified in the path parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    put:
      operationId: updateUserById
      summary: Updates an existing user by his user id
      tags:
        - User
      requestBody:
        description: |
          The user object containing all the new data that should be replaced.
          You have to pass the old value of a property if it should not be replaced
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        200:
          description: The updated user containing the new data provided in the request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      parameters:
        - $ref: '#/components/parameters/userId'
      operationId: deleteUserById
      summary: Deletes an existing user by his id
      tags:
        - User
      responses:
        204:
          description: Deleting the user was successful
        409:
          description: User not found

  /user/{userId}/password:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      operationId: changeUserPassword
      summary: Endpoint for administrator to change a user's password
      tags:
        - User
      requestBody:
        description: Request payload containing new password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newPassword:
                  type: string
                  format: password
                  description: The new password for the user
                  example: Sup3rS3r3t
      responses:
        204:
          description: Password successfully changed
        401:
          description: Unauthorized access
        409:
          description: User not found

  /user/{userId}/access-role:
    parameters:
      - $ref: '#/components/parameters/userId'
    put:
      operationId: changeUsersAccessRole
      summary: Endpoint for administrator to change a user's access role
      tags:
        - User
      requestBody:
        description: Request payload containing the new access role
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                newAccessRole:
                  $ref: '#/components/schemas/AccessRole'

      responses:
        200:
          description: User with updated access role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized access
        409:
          description: User not found


  /exemption:
    post:
      summary: Submit an exemption request
      tags:
        - ExemptionRequest
      operationId: submitRequest
      requestBody:
        description: Exemption request submission details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExemptionRequestSubmissionDto'
      responses:
        '201':
          description: Successful submission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExemptionRequestDto'
        '400':
          description: Bad Request
        '500':
          description: Error occurred during submission


  /exemption/{id}:
    parameters:
      - $ref: '#/components/parameters/exemptionRequestId'
    get:
      summary: Get an exemption request by ID
      tags:
        - ExemptionRequest
      operationId: getExemptionRequest
      parameters:
        - $ref: '#/components/parameters/exemptionRequestId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExemptionRequestDto'
        '400':
          description: Invalid id parameter
        '500':
          description: Error occurred during query of exemption request
  /exemption/self-submitted:
    get:
      summary: Get all self-submitted exemption requests
      tags:
        - ExemptionRequest
      operationId: getAllSelfSubmittedRequests
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExemptionRequestDto'
        default:
          description: Error occurred while retrieving the requests


components:

  parameters:
    userId:
      name: userId
      description: The numeric id of the user for whom the desired action should be performed
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'

    exemptionRequestId:
      name: exemptionRequestId
      description: The numeric id of the exemption request
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Id'

    username:
      name: email
      description: The unique email of the user for whom the desired action should be performed
      in: path
      required: true
      schema:
        type: string
        example: "john.doe"

    searchTerm:
      name: searchTerm
      in: query
      description: The term to search for in the user's name or email
      required: false
      schema:
        type: string

    limit:
      name: limit
      description: | 
        The maximum number of results to be returned per page.
        This can be any number greater than 0.
      in: query
      required: false
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 10
        example: 69


  schemas:

    ExemptionRequestDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the exemption request.
          example: 1
        startTime:
          type: string
          format: date-time
          description: The start time of the exemption period.
          example: "2023-05-25T09:00:00"
        endTime:
          type: string
          format: date-time
          description: The end time of the exemption period.
          example: "2023-05-25T12:00:00"
        submissionDate:
          type: string
          format: date-time
          description: The timestamp of the submission.
          example: "2023-05-20T015:00:00"
        reason:
          type: string
          description: The reason for the exemption request.
          example: "Termin beim OrthopÃ¤den"
        exemptionCategory:
          type: "string"
          enum:
            - "MEDICAL_APPOINTMENT"
            - "OFFICE_APPOINTMENT"
            - "OTHER"
          example: "MEDICAL_APPOINTMENT"
        applicant:
          $ref: '#/components/schemas/PlainApprenticeDto'
        requestProcessing:
          $ref: '#/components/schemas/RequestProcessingDto'
      required:
        - startTime
        - endTime
        - submissionDate
        - reason
        - exemptionCategory
        - applicantId

    ExemptionRequestSubmissionDto:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
          description: The start time of the exemption period.
          example: "2023-05-25T09:00:00"
        endTime:
          type: string
          format: date-time
          description: The end time of the exemption period.
          example: "2023-05-25T12:00:00"
        reason:
          type: string
          description: The reason for the exemption request.
          example: "Termin beim OrthopÃ¤den"
        exemptionCategory:
          type: "string"
          enum:
            - "MEDICAL_APPOINTMENT"
            - "OFFICE_APPOINTMENT"
            - "OTHER"
          example: "MEDICAL_APPOINTMENT"
        applicantId:
          type: integer
      required:
        - startTime
        - endTime
        - reason
        - exemptionCategory
        - applicantId

    ApprenticeDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the apprentice.
          example: 1
        firstName:
          type: string
          description: The first name of the apprentice.
          example: "Max"
        lastName:
          type: string
          description: The last name of the apprentice.
          example: "Mustermann"
        email:
          type: string
          format: email
          description: The email address of the apprentice.
          example: "max.mustermann@example.com"
        department:
          $ref: '#/components/schemas/DepartmentDto'
        socioEduExpert:
          $ref: '#/components/schemas/SocioEduExpertDto'
      required:
        - id
        - firstName
        - lastName
        - email
        - department
        - socioEduExpert

    PlainApprenticeDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the apprentice.
          example: 1
        firstName:
          type: string
          description: The first name of the apprentice.
          example: "Max"
        lastName:
          type: string
          description: The last name of the apprentice.
          example: "Mustermann"
      required:
        - id
        - firstName
        - lastName

    TrainerDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the trainer.
          example: 21
        firstName:
          type: string
          description: The first name of the trainer.
          example: "Herr"
        lastName:
          type: string
          description: The last name of the trainer.
          example: "Ausbilder"
        email:
          type: string
          format: email
          description: The email address of the apprentice.
          example: "herr.ausbilder@example.com"
        department:
          $ref: '#/components/schemas/DepartmentDto'
      required:
        - id
        - firstName
        - lastName
        - email
        - department

    PlainTrainerDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the trainer.
          example: 21
        firstName:
          type: string
          description: The first name of the trainer.
          example: "Herr"
        lastName:
          type: string
          description: The last name of the trainer.
          example: "Ausbilder"
      required:
        - id
        - firstName
        - lastName


    RequestProcessingDto:
      type: object
      properties:
        processingStatus:
          type: string
          enum:
            - "DRAFT"
            - "SUBMITTED"
            - "APPROVED"
            - "REJECTED"
            - "RECORDED_IN_SYSTEM"
            - "CONFIRMATION_PRESENT"
            -  "CONFIRMATION_MISSING"
          example: "APPROVED"
        comment:
          type: string
          description: The last name of the trainer.
          example: null
        processingDate:
          type: string
          format: date-time
          description: The timestamp when the submission was processed.
          example: "2023-05-24T16:00:00"
        processor:
          $ref: '#/components/schemas/PlainTrainerDto'
      required:
        - processingStatus
        - processingDate
        - processor


    SocioEduExpertDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the SocialEduExpert.
          example: 1
        firstName:
          type: string
          description: The first name of the SocialEduExpert.
          example: "Maria"
        lastName:
          type: string
          description: The last name of the SocialEduExpertDto.
          example: "Musterfrau"
        email:
          type: string
          format: email
          description: The email address of the SocialEduExpertDto.
          example: "maria.musterfrau@example.com"
      required:
        - id
        - firstName
        - lastName
        - email

    DepartmentDto:
      type: object
      properties:
        id:
          type: integer
          description: The ID of the department.
          example: 1
        name:
          type: string
          description: The name of the department.
          example: "Informationstechnik"

    BaseUser:
      type: object
      properties:
        firstName:
          type: string
          pattern: ^[a-zA-Z\x7f-\xff-]{2,}+(\s?[a-zA-Z\x7f-\xff-]{2,})*$
          example: Max
        lastName:
          type: string
          pattern: ^[a-zA-Z\x7f-\xff-]{2,}+(\s?[a-zA-Z\x7f-\xff-]{2,})*$
          example: Mustermann
        username:
          type: string
          pattern: ^[a-zA-Z\x7f-\xff-]+[.][a-zA-Z\x7f-\xff-]+\d*$
          example: max.mustermann2
        dateOfBirth:
          type: string
          format: date
          description: The date of birth in ISO 8601 format (YYYY-MM-DD)
          example: 1999-04-12
        gender:
          $ref: '#/components/schemas/Gender'
          # The profile picture is missing here, because it will be handled in a separate endpoint for pictures
          # to reduce the amount of data transmitted at once. The picture can also be accessed more easily
          # in the controller when it will be transmitted as image/jpeg instead of application/json
        profession:
          type: string
          pattern: ^[a-zA-Z\x7f-\xff-]{2,}+(\s?[a-zA-Z\x7f-\xff-]{2,})*$
          example: Ausbilder
        department:
          type: string
          pattern: ^[a-zA-Z\x7f-\xff-]{2,}+(\s?[a-zA-Z\x7f-\xff-]{2,})*$
          example: Informationstechnik
        roomNumber:
          type: string
          pattern: ^\d{1,3}[.]\d{1,3}[.]\d{1,3}$
          example: 2.3.12
        preferences:
          $ref: '#/components/schemas/UserPreferences'
        accessRole:
          $ref: '#/components/schemas/AccessRole'
      required:
        - firstName
        - lastName
        - username
        - gender
        - profession
        - department
        - accessRole


    User:
      allOf:
        - $ref: '#/components/schemas/BaseUser'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/Id'
          required:
            - id

    UserCreation:
      allOf:
        - $ref: '#/components/schemas/BaseUser'
        - type: object
          properties:
            password:
              type: string
              format: password
              writeOnly: true
              example: Str3ngG3h3!m
          required:
            - password

    UserUpdate:
      allOf:
        - $ref: '#/components/schemas/BaseUser'

    UserPreferences:
      type: object
      properties:
        prefersMale:
          type: boolean
          description: Indicates if the user prefers male partners.
          example: true
        prefersFemale:
          type: boolean
          description: Indicates if the user prefers female partners.
          example: false
        prefersDiverse:
          type: boolean
          description: Indicates if the user prefers diverse partners.
          example: true
        smallestPreferredAge:
          type: integer
          format: byte
          description: The smallest preferred age of the user.
          example: 18
        highestPreferredAge:
          type: integer
          format: byte
          description: The highest preferred age of the user.
          example: 35
        id:
          $ref: '#/components/schemas/Id'
      required:
        - prefersMale
        - prefersFemale
        - prefersDiverse
        - smallestPreferredAge
        - highestPreferredAge
        - id

    LoginCredentials:
      type: object
      properties:
        username:
          type: string
          example: "john.doe"
        password:
          type: string
          example: "secret"
      required:
        - username
        - password

    JwtResponse:
      type: object
      properties:
        token:
          type: string
          format: jwt
          example: "eyJhbGciOiJIUzpXVCJ9.eyJzM5MDIyfQ.Sfl_adQssw5c"
      required:
        - token

    Gender:
      type: string
      enum:
        - MALE
        - FEMALE
        - DIVERSE
        - NOT_PROVIDED
      example: DIVERSE

    AccessRole:
      type: string
      enum:
        - ADMINISTRATOR
        - MEMBER
      default: MEMBER
      example: MEMBER

    Id:
      type: integer
      format: int32
      description: The unique identifier of the user preferences.
      minimum: 1
      example: 123


  securitySchemes:
    jwt:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JSON Web Token'